{{- if (eq .Values.enabled "all") }}
{{- $namespace := print $.Values.global.pattern "-" $.Values.clusterGroup.name }}
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  finalizers:
  - argoproj.io/finalizer
  # Changing the name affects the ClusterRoleBinding, the generated secret,
  # route URL, and argocd.argoproj.io/managed-by annotations
  name: {{ .Values.clusterGroup.name }}-gitops
  namespace: {{ $namespace }}
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
# Adding health checks to argocd to prevent pvc resources
# that aren't bound state from blocking deployments
  resourceCustomizations: |
    PersistentVolumeClaim:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Pending" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            elseif obj.status.phase == "Bound" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for PVC"
        return hs
  applicationInstanceLabelKey: argocd.argoproj.io/instance
  # Not the greatest way to pass git/quay info to sub-applications, but it will do until
  # we can support helmChart with kustomize
  # The other option is to pass them in as environment variables eg. BLUEPRINT_VERSION
  configManagementPlugins: |
    - name: kustomize-version
      generate:
        command: ["sh", "-c"]
        args: ["kustomize version 1>&2 && exit 1"]
    - name: kustomize-with-helm
      generate:
        command: ["kustomize"]
        args: ["build", "--enable-helm"]
    - name: helm-with-kustomize
      init:
        command: ["/bin/sh", "-c"]
        args: ["helm dependency build"]
      generate:
        command: ["/bin/bash", "-c"]
        args: ["helm template . --name-template ${ARGOCD_APP_NAME:0:52}
            -f $(git rev-parse --show-toplevel)/values-global.yaml
            -f $(git rev-parse --show-toplevel)/values-{{ .Values.clusterGroup.name }}.yaml
            --set global.repoURL=$ARGOCD_APP_SOURCE_REPO_URL
            --set global.targetRevision=$ARGOCD_APP_SOURCE_TARGET_REVISION
            --set global.namespace=$ARGOCD_APP_NAMESPACE
            --set global.pattern={{ .Values.global.pattern }}
            --set global.clusterDomain={{ .Values.global.clusterDomain }}
            --set global.hubClusterDomain={{ .Values.global.hubClusterDomain }}
            --set global.localClusterDomain={{ coalesce .Values.global.localClusterDomain .Values.global.hubClusterDomain }}
            --set clusterGroup.name={{ .Values.clusterGroup.name }}
            --post-renderer ./kustomize"]
  applicationSet:
    resources:
      limits:
        cpu: "2"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: "4"
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 2Gi
  sso:
    provider: dex
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
  initialSSHKnownHosts: {}
  rbac:
    defaultPolicy: role:admin
  repo:
    resources:
      limits:
        cpu: "1"
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      kinds:
      - TaskRun
      - PipelineRun
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: reencrypt
    service:
      type: ""
  tls:
    ca: {}
